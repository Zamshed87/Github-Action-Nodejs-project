/* eslint-disable react-hooks/exhaustive-deps */
import { SaveAlt } from "@mui/icons-material";
import { Tooltip } from "@mui/material";
import AntScrollTable from "common/AntScrollTable";
import FormikSelect from "common/FormikSelect";
import { useFormik } from "formik";
import { getTableDataDailyAttendance } from "modules/timeSheet/reports/lateReport/helper";
import { useEffect, useState } from "react";
import { shallowEqual, useDispatch, useSelector } from "react-redux";
import { toast } from "react-toastify";
import { createCommonExcelFile } from "utility/customExcel/generateExcelAction";
import useAxiosPost from "utility/customHooks/useAxiosPost";
import { dateFormatter } from "utility/dateFormatter";
import { customStyles } from "utility/selectCustomStyle";
import AsyncFormikSelect from "../../../common/AsyncFormikSelect";
import DefaultInput from "../../../common/DefaultInput";
import MasterFilter from "../../../common/MasterFilter";
import NoResult from "../../../common/NoResult";
import PrimaryButton from "../../../common/PrimaryButton";
import {
  getSearchEmployeeList,
  getWorkplaceDetails,
} from "../../../common/api";
import Loading from "../../../common/loading/Loading";
import NotPermittedPage from "../../../common/notPermitted/NotPermittedPage";
import { setFirstLevelNameAction } from "../../../commonRedux/reduxForLocalStorage/actions";
import useAxiosGet from "../../../utility/customHooks/useAxiosGet";
import useDebounce from "../../../utility/customHooks/useDebounce";
import { todayDate } from "../../../utility/todayDate";
import { columns, overTimeGeneratedDtoCol, updateOvertimeHour } from "./helper";

const EmOvertimeAutoGenerated = () => {
  const dispatch = useDispatch();

  const [loading, setLoading] = useState(false);

  const [pages, setPages] = useState({
    current: 1,
    pageSize: 25,
    // total: 0,
  });

  const [, , loadingOveritme, setRowDto] = useAxiosGet();
  const [buDetails, setBuDetails] = useState({});

  const [
    overTimeEmpList,
    getoverTimeEmpListAPI,
    loadingEmpList,
    setOverTimeEmpList,
  ] = useAxiosPost();

  const [maxOverTimeDaily, setMaxOverTimeDaily] = useState(0);
  // state
  const { orgId, buId, employeeId, wgId, wId } = useSelector(
    (state) => state?.auth?.profileData,
    shallowEqual
  );

  // permission
  const { permissionList } = useSelector((state) => state?.auth, shallowEqual);
  let permission = null;
  permissionList.forEach((item) => {
    if (item?.menuReferenceId === 30334) {
      permission = item;
    }
  });

  // get row data
  // const overtimeLanding = (pagination, searchtText, empId) => {
  //   const api = `/Payroll/GetOverTimeListData?PartType=AutomatedOverTimeEmployeeList&AccountId=${orgId}&EmployeeId=${
  //     empId || 0
  //   }&BusinessUnitId=${buId}&WorkplaceGroupId=${wgId}&FromDate=${
  //     values?.fromDate || todayDate()
  //   }&ToDate=${values?.toDate || todayDate()}&IntPageNo=${
  //     pagination?.current
  //   }&IntPageSize=${
  //     values?.employeeSrc ? 100 : pagination?.pageSize
  //   }&searchText=${searchtText || ""}`;
  //   getOverTimeLanding(api, (res) => {
  //     setResLanding(res);
  //     let indexing = parseInt(
  //       (pagination?.current - 1) * pagination?.pageSize + 1
  //     );
  //     const temp = res?.overtimeReports?.map((item, index) => {
  //       const time = toHoursAndMinutes(+item?.numHours);
  //       return {
  //         ...item,
  //         sl: pagination?.current === 1 ? index + 1 : indexing++,
  //         // numHours: (+item?.numHours / 60).toFixed(2),
  //         numHours: (+`${time?.hours}.${time?.minutes}`).toFixed(2),
  //       };
  //     });

  //     setPages({
  //       current: pagination?.current,
  //       pageSize: pagination?.pageSize,
  //       total: res?.overtimeReports?.[0]?.totalCount,
  //     });
  //     setMaxOverTimeDaily(res?.intMaxOverTimeDaily);
  //     setRowDto(temp);
  //   });
  // };

  // overTime emp list api handler
  const getOvertimeEmpListHandler = (values, pagination) => {
    setMaxOverTimeDaily(0);
    const payload = {
      accountId: orgId,
      // workplaceId: wId,
      fromDate: values?.fromDate || todayDate(),
      toDate: values?.toDate || todayDate(),
      pageSize: values?.employeeSrc?.employeeId ? 60 : pagination?.pageSize,
      pageNumber: pagination?.current,
      intOTtype: values?.intOTtype?.value || 1,
      workplaceGroupId: wgId,
      searchText: values?.searchtText || null,
      employeeId: values?.employeeSrc?.employeeId || 0,
    };
    getoverTimeEmpListAPI(
      "/Payroll/GetOverTimeEmployeeList",
      payload,
      (res = []) => {
        let indexing = parseInt(
          (pagination?.current - 1) * pagination?.pageSize + 1
        );
        const temp = res?.map((item, index) => {
          return {
            ...item,
            sl: pagination?.current === 1 ? index + 1 : indexing++,
            numMinutes: (item?.numMinutes / 60).toFixed(2) || 0,
            isChecked: false,
            // numHours: `${time?.hours}.${time?.minutes}`,
          };
        });
        setMaxOverTimeDaily(res?.[0]?.intMaxOverTimeDaily);
        setPages({
          current: pagination?.current,
          pageSize: pagination?.pageSize,
          total: res?.[0]?.totalCount,
        });
        setOverTimeEmpList(temp);
      }
    );
  };

  const rowDtoHandler = (name, index, value) => {
    // name = "numMinutes"
    const data = [...overTimeEmpList];
    data[index][name] = value;
    try {
      if (maxOverTimeDaily < +value) {
        return toast.warn(
          `Daily Overtime can't be more than ${maxOverTimeDaily / 60} Hours`
        );
      }

      // const decimal = getDecimal(+value);

      // if (decimal > 0.59) {
      //   return toast.warn(`Daily Overtime can't be more than ${value} hours`);
      // }

      // resLanding?.intOtbenefitsHour if 1 amount will be actual, if 2 amount will be double :by calculation
      // resLanding?.intOtAmountShouldBe if 1 amount will be float number, if 2 amount will be floor, if 3 amount will be ceiling
      const intOtAmountShouldBe = overTimeEmpList?.[0]?.intOtAmountShouldBe;

      // const totalMin = houreToMin(value);

      data[index].numTotalAmount = (
        +data[index]?.numPerMinunitRate *
        (+value * 60)
      ).toFixed(2);
      // data[index].numTotalAmount = (
      //   +data[index]?.numPerMinunitRate *
      //   value *
      //   +intOtbenefitsHour
      // ).toFixed(2);

      if (intOtAmountShouldBe === 2) {
        data[index].numTotalAmount = Math.floor(+data[index]?.numTotalAmount);
      }
      if (intOtAmountShouldBe === 3) {
        data[index].numTotalAmount = Math.ceil(+data[index]?.numTotalAmount);
      }
      // data[index][name] = value;
      setOverTimeEmpList(data);
    } catch (error) {
      // console.log({error})
      setOverTimeEmpList(data);
    }
  };

  // formik
  const { values, setFieldValue, errors, touched } = useFormik({
    initialValues: {
      fromDate: todayDate(),
      toDate: todayDate(),
      employeeSrc: "",
      search: "",
      workplaceGroup: "",
      employee: "",
      designation: "",
      department: "",
      date: "",
      allSelected: "",
      bulkChangeHour: "",
      searchtText: "",
    },
  });

  // save
  const saveFromFieldHandler = () => {
    // setLoading(true);
    const callBack = () => {
      getOvertimeEmpListHandler(values, {
        ...pages,
        current: 1,
        pageSize: 50,
      });
    };
    const payload = overTimeEmpList.map((item) => {
      // console.log({ item });
      return {
        intAutoId: item?.intAutoId,
        //minutes: item?.numHours * 60 || 0, // convert-to-min
        minutes: item?.numMinutes ? +item?.numMinutes * 60 : 0, // hourToMinute(item?.numHours) ? hourToMinute(item?.numHours) :
        actionBy: employeeId,
      };
    });
    updateOvertimeHour(payload, setLoading, callBack);
  };

  // all useEffect
  useEffect(() => {
    getWorkplaceDetails(wId, setBuDetails);

    // overtimeLanding(pages);
    setOverTimeEmpList([]);
    getOvertimeEmpListHandler(values, pages);
  }, [orgId, wgId, buId]);

  useEffect(() => {
    dispatch(setFirstLevelNameAction("Employee Management"));
    document.title = "Overtime Auto Generated";
  }, []);

  const handleTableChange = (pagination, newRowDto) => {
    if (newRowDto?.action === "filter") {
      return;
    }
    if (
      pages?.current === pagination?.current &&
      pages?.pageSize !== pagination?.pageSize
    ) {
      // return overtimeLanding(
      //   pagination,
      //   srcText,
      //   values?.employeeSrc?.value || 0
      // );
      return getOvertimeEmpListHandler(values, pagination);
    }
    if (pages?.current !== pagination?.current) {
      // overtimeLanding(pagination, srcText, values?.employeeSrc?.value || 0);
      return getOvertimeEmpListHandler(values, pagination);
    }
  };
  const debounce = useDebounce();
  return (
    <div className="table-card">
      <form>
        {(loading || loadingOveritme || loadingEmpList) && <Loading />}
        {permission?.isView ? (
          <>
            <div className="table-card-heading justify-content-between align-items-center">
              <div className="d-flex">
                {values?.intOTtype?.value === 2 ? (
                  <Tooltip title="Export CSV" arrow>
                    <button
                      className="btn-save "
                      onClick={(e) => {
                        e.stopPropagation();
                        e.preventDefault();
                        if (!overTimeEmpList?.length) {
                          return toast.warn("No Data Found");
                        }
                        setLoading(true);
                        const excelLanding = async () => {
                          try {
                            const newData = overTimeEmpList?.map((item) => ({
                              ...item,
                              dteAttendanceDate: dateFormatter(
                                item?.dteAttendanceDate
                              ),
                              numPerMinunitRate: (
                                item?.numPerMinunitRate * 60
                              ).toFixed(2),
                            }));
                            createCommonExcelFile({
                              titleWithDate: `Overtime Auto Generated - ${dateFormatter(
                                values?.fromDate
                              )} to ${dateFormatter(values?.toDate)}`,
                              fromDate: "",
                              toDate: "",
                              buAddress: buDetails?.strAddress,
                              businessUnit: buDetails?.strWorkplace,
                              tableHeader: columns,
                              getTableData: () =>
                                getTableDataDailyAttendance(
                                  newData,
                                  Object.keys(columns)
                                ),
                              tableFooter: [],
                              extraInfo: {},
                              tableHeadFontSize: 10,
                              widthList: {
                                C: 14,
                                B: 30,
                                D: 30,
                                E: 25,
                                F: 20,
                                G: 15,
                                H: 15,
                                I: 15,
                                J: 20,
                                K: 20,
                              },
                              commonCellRange: "A1:J1",
                              CellAlignment: "left",
                            });
                            setLoading(false);
                          } catch (error) {
                            setLoading(false);
                            console.log({ error });
                            // toast.error(error?.response?.data?.message);
                          }
                        };
                        excelLanding();
                      }}
                    >
                      <SaveAlt sx={{ color: "#637381", fontSize: "16px" }} />
                    </button>
                  </Tooltip>
                ) : null}
                <h2 className="mx-2">Overtime Auto Generated</h2>
              </div>
              <div className="d-flex justify-content-end mr-2">
                <div className="row">
                  <MasterFilter
                    isHiddenFilter
                    width="200px"
                    inputWidth="200px"
                    value={values?.searchtText}
                    setValue={(value) => {
                      setFieldValue("searchtText", value);
                      if (value) {
                        debounce(() => {
                          getOvertimeEmpListHandler(values, {
                            ...pages,
                            current: 1,
                            pageSize: 50,
                          });
                          // overtimeLanding(initPage, value);
                        }, 500);
                      } else {
                        getOvertimeEmpListHandler(values, {
                          ...pages,
                          current: 1,
                          pageSize: 50,
                        });
                      }
                    }}
                    cancelHandler={() => {
                      setFieldValue("searchtText", "");
                      getOvertimeEmpListHandler(values, {
                        ...pages,
                        current: 1,
                        pageSize: 50,
                      });
                    }}
                    placeholder={"Search"}
                  />

                  <PrimaryButton
                    type="button"
                    className="btn btn-green px-auto mr-2"
                    label={"Save"}
                    onClick={saveFromFieldHandler}
                  />
                </div>
              </div>
            </div>
            <div className="card-style pb-0 mt-3 mb-2">
              <div className="row">
                <div className="col-lg-2">
                  <div className="input-field-main">
                    <label>
                      From Date <span style={{ color: "red" }}>*</span>
                    </label>
                    <DefaultInput
                      classes="input-sm"
                      value={values?.fromDate}
                      placeholder=""
                      name="fromDate"
                      type="date"
                      className="form-control"
                      onChange={(e) => {
                        setFieldValue("fromDate", e.target.value);
                      }}
                      errors={errors}
                      touched={touched}
                    />
                  </div>
                </div>
                <div className="col-lg-2">
                  <div className="input-field-main">
                    <label>
                      To Date <span style={{ color: "red" }}>*</span>
                    </label>
                    <DefaultInput
                      classes="input-sm"
                      value={values?.toDate}
                      placeholder=""
                      name="toDate"
                      type="date"
                      className="form-control"
                      onChange={(e) => {
                        setFieldValue("toDate", e.target.value);
                      }}
                      errors={errors}
                      touched={touched}
                    />
                  </div>
                </div>
                <div className="col-lg-3">
                  <label>
                    OT Type <span style={{ color: "red" }}>*</span>
                  </label>
                  <FormikSelect
                    name="intOTtype"
                    options={[
                      {
                        value: 1,
                        label: "Not Applicable",
                      },
                      { value: 2, label: "With Salary" },
                      {
                        value: 3,
                        label: "Without Salary/Additional OT",
                      },
                    ]}
                    value={values?.intOTtype}
                    onChange={(valueOption) => {
                      setMaxOverTimeDaily(0);
                      setOverTimeEmpList([]);
                      setRowDto([]);
                      setFieldValue("intOTtype", valueOption);
                    }}
                    placeholder=""
                    styles={customStyles}
                    errors={errors}
                    touched={touched}
                    isDisabled={false}
                  />
                </div>
                <div className="col-lg-3">
                  <div className="input-field-main">
                    <label>Employee</label>
                    <AsyncFormikSelect
                      selectedValue={values?.employeeSrc}
                      isSearchIcon={true}
                      handleChange={(valueOption) => {
                        setMaxOverTimeDaily(0);
                        setOverTimeEmpList([]);
                        setRowDto([]);
                        setFieldValue("employeeSrc", valueOption);
                      }}
                      placeholder="Search (min 3 letter)"
                      loadOptions={(v) => getSearchEmployeeList(buId, wgId, v)}
                    />
                  </div>
                </div>
                <div style={{ marginTop: "14px" }} className="col-lg-2">
                  <PrimaryButton
                    type="button"
                    onClick={() => {
                      if (!values?.fromDate || !values?.toDate) {
                        return toast.warn("Please select date range first");
                      }
                      if (!values?.intOTtype?.value) {
                        return toast.warn("Please select OT type");
                      }
                      setFieldValue("searchtText", "");
                      setOverTimeEmpList([]);
                      // overtimeLanding(initPage, "", values?.employeeSrc?.value);
                      getOvertimeEmpListHandler(values, {
                        ...pages,
                        current: 1,
                        pageSize: 50,
                      });
                    }}
                    className="btn btn-green my-2 "
                    label={"View"}
                  />
                </div>
              </div>
            </div>

            <div className="">
              {overTimeEmpList?.length > 0 ? (
                <div className="table-card-styled employee-table-card table-responsive ant-scrolling-Table">
                  <AntScrollTable
                    data={overTimeEmpList}
                    columnsData={overTimeGeneratedDtoCol(
                      rowDtoHandler,
                      overTimeEmpList,
                      setOverTimeEmpList
                    )}
                    rowKey={
                      (record) =>
                        `${record?.strEmployeeCode} + ${record?.dteAttendanceDate}`
                      // values?.employeeSrc
                      //   ? record?.dteAttendanceDate
                      //   : record?.strEmployeeCode
                    }
                    // handleTableChange={handleTableChange}
                    handleTableChange={({ pagination, newRowDto }) =>
                      handleTableChange(
                        pagination,
                        newRowDto,
                        values?.searchtText || ""
                      )
                    }
                    pages={values?.employeeSrc ? 100 : pages?.pageSize}
                    pagination={pages}
                    removePagination={values?.employeeSrc?.value ? true : false}
                    setColumnsData={(data) => setOverTimeEmpList(data)}
                  />
                </div>
              ) : (
                <NoResult />
              )}
            </div>
          </>
        ) : (
          <NotPermittedPage />
        )}
      </form>
    </div>
  );
};

export default EmOvertimeAutoGenerated;
