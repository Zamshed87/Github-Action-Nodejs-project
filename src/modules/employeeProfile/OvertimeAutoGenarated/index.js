/* eslint-disable react-hooks/exhaustive-deps */
import { useFormik } from "formik";
import React, { useEffect, useState } from "react";
import { shallowEqual, useDispatch, useSelector } from "react-redux";
import AntTable from "../../../common/AntTable";
import DefaultInput from "../../../common/DefaultInput";
import Loading from "../../../common/loading/Loading";
import NoResult from "../../../common/NoResult";
import NotPermittedPage from "../../../common/notPermitted/NotPermittedPage";
import PrimaryButton from "../../../common/PrimaryButton";
import { setFirstLevelNameAction } from "../../../commonRedux/reduxForLocalStorage/actions";
import { overTimeGeneratedDtoCol, updateOvertimeHour } from "./helper";
import { todayDate } from "../../../utility/todayDate";
import useAxiosGet from "../../../utility/customHooks/useAxiosGet";
import { toast } from "react-toastify";
import MasterFilter from "../../../common/MasterFilter";
import { commonDtofilter } from "../../../utility/commonDtoHelper";
import {
  hourToMinute,
  toHoursAndMinutes,
} from "../../../utility/timeCalculation";
import {
  getDecimal,
  getDecimalIntegerNumber,
  getIntegerNumber,
} from "../../../utility/getDecimal";
import AsyncFormikSelect from "../../../common/AsyncFormikSelect";
import { getSearchEmployeeList } from "../../../common/api";

const EmOvertimeAutoGenerated = () => {
  const dispatch = useDispatch();

  const [loading, setLoading] = useState(false);
  const [resLanding, setResLanding] = useState({});

  const [pages, setPages] = useState({
    current: 1,
    pageSize: 15,
    // total: 0,
  });
  const initPage = {
    current: 1,
    pageSize: 15,
  };

  const [rowDto, getOverTimeLanding, loadingOveritme, setRowDto] =
    useAxiosGet();
  const [maxOverTimeDaily, setMaxOverTimeDaily] = useState(0);
  // state
  const { orgId, buId, employeeId, wgId } = useSelector(
    (state) => state?.auth?.profileData,
    shallowEqual
  );

  // permission
  const { permissionList } = useSelector((state) => state?.auth, shallowEqual);
  let permission = null;
  permissionList.forEach((item) => {
    if (item?.menuReferenceId === 30334) {
      permission = item;
    }
  });

  // get row data
  const overtimeLanding = (pagination, searchtText, empId) => {
    const api = `/Payroll/GetOverTimeListData?PartType=AutomatedOverTimeEmployeeList&AccountId=${orgId}&EmployeeId=${
      empId || 0
    }&BusinessUnitId=${buId}&WorkplaceGroupId=${wgId}&FromDate=${values?.fromDate || todayDate()}&ToDate=${
      values?.toDate || todayDate()
    }&IntPageNo=${pagination?.current}&IntPageSize=${
      values?.employeeSrc ? 100 : pagination?.pageSize
    }&searchText=${searchtText || ""}`;
    getOverTimeLanding(api, (res) => {
      setResLanding(res);
      let indexing = parseInt(
        (pagination?.current - 1) * pagination?.pageSize + 1
      );
      const temp = res?.overtimeReports?.map((item, index) => {
        let time = toHoursAndMinutes(+item?.numHours);
        return {
          ...item,
          sl: pagination?.current === 1 ? index + 1 : indexing++,
          // numHours: (+item?.numHours / 60).toFixed(2),
          numHours: (+`${time?.hours}.${time?.minutes}`).toFixed(2),
        };
      });

      setPages({
        current: pagination?.current,
        pageSize: pagination?.pageSize,
        total: res?.overtimeReports?.[0]?.totalCount,
      });
      setMaxOverTimeDaily(res?.intMaxOverTimeDaily);
      setRowDto(temp);
    });
  };

  const houreToMin = (value) => {
    const totalMin =
      getIntegerNumber(value) * 60 + +getDecimalIntegerNumber(value);
    return totalMin;
  };

  const rowDtoHandler = (name, index, value) => {
    if (maxOverTimeDaily < +value) {
      return toast.warn(
        `Daily Overtime can't be more than ${maxOverTimeDaily} hours`
      );
    }

    const decimal = getDecimal(+value);

    if (decimal > 0.59) {
      return toast.warn(`Daily Overtime can't be more than ${value} hours`);
    }

    // resLanding?.intOtbenefitsHour if 1 amount will be actual, if 2 amount will be double :by calculation
    // resLanding?.intOtAmountShouldBe if 1 amount will be float number, if 2 amount will be floor, if 3 amount will be ceiling

    const data = [...rowDto];
    data[index][name] = value;
    const totalMin = houreToMin(value);

    data[index].numTotalAmount = (
      +data[index]?.numPerMinunitRate *
      totalMin *
      +resLanding?.intOtbenefitsHour
    ).toFixed(2);

    if (resLanding?.intOtAmountShouldBe === 2) {
      data[index].numTotalAmount = Math.floor(+data[index]?.numTotalAmount);
    }
    if (resLanding?.intOtAmountShouldBe === 3) {
      data[index].numTotalAmount = Math.ceil(+data[index]?.numTotalAmount);
    }
    // data[index][name] = value;
    setRowDto(data);
  };

  // formik
  const { values, setFieldValue, errors, touched } = useFormik({
    initialValues: {
      fromDate: todayDate(),
      toDate: todayDate(),
      employeeSrc: "",
      search: "",
      workplaceGroup: "",
      employee: "",
      designation: "",
      department: "",
      date: "",
      allSelected: "",
      bulkChangeHour: "",
      searchtText: "",
    },
  });

  // save
  const saveFromFieldHandler = () => {
    // setLoading(true);
    const callBack = () => {
      overtimeLanding(pages);
    };
    const payload = rowDto.map((item) => {
      return {
        intAutoId: item?.intAutoId,
        //minutes: item?.numHours * 60 || 0, // convert-to-min
        minutes: hourToMinute(item?.numHours),
        actionBy: employeeId,
      };
    });
    updateOvertimeHour(payload, setLoading, callBack);
  };

  // all useEffect
  useEffect(() => {
    overtimeLanding(pages);
  }, [orgId, wgId, buId]);

  useEffect(() => {
    dispatch(setFirstLevelNameAction("Employee Management"));
  }, []);

  const handleTableChange = ({ pagination }) => {
    if (
      pages?.current === pagination?.current &&
      pages?.pageSize !== pagination?.pageSize
    ) {
      return overtimeLanding(
        pagination,
        values?.searchtText || "",
        values?.employeeSrc?.value || 0
      );
    }
    if (pages?.current !== pagination?.current) {
      overtimeLanding(
        pagination,
        values?.searchtText || "",
        values?.employeeSrc?.value || 0
      );
    }
  };
  return (
    <div className="table-card">
      <form>
        {(loading || loadingOveritme) && <Loading />}
        {permission?.isView ? (
          <>
            <div className="card-style mt-5">
              <div className="row">
                <div className="col-lg-3">
                  <div className="input-field-main">
                    <label>From Date</label>
                    <DefaultInput
                      classes="input-sm"
                      value={values?.fromDate}
                      placeholder=""
                      name="fromDate"
                      type="date"
                      className="form-control"
                      onChange={(e) => {
                        setFieldValue("fromDate", e.target.value);
                      }}
                      errors={errors}
                      touched={touched}
                    />
                  </div>
                </div>
                <div className="col-lg-3">
                  <div className="input-field-main">
                    <label>To Date</label>
                    <DefaultInput
                      classes="input-sm"
                      value={values?.toDate}
                      placeholder=""
                      name="toDate"
                      type="date"
                      className="form-control"
                      onChange={(e) => {
                        setFieldValue("toDate", e.target.value);
                      }}
                      errors={errors}
                      touched={touched}
                    />
                  </div>
                </div>
                <div className="col-lg-3">
                  <div className="input-field-main">
                    <label>Employee</label>
                    <AsyncFormikSelect
                      selectedValue={values?.employeeSrc}
                      isSearchIcon={true}
                      handleChange={(valueOption) => {
                        setFieldValue("employeeSrc", valueOption);
                      }}
                      placeholder="Search (min 3 letter)"
                      loadOptions={(v) => getSearchEmployeeList(buId, wgId, v)}
                    />
                  </div>
                </div>
                <div style={{ marginTop: "14px" }} className="col-lg-3">
                  <PrimaryButton
                    type="button"
                    onClick={() => {
                      setFieldValue("searchtText", "");
                      overtimeLanding(initPage, "", values?.employeeSrc?.value);
                    }}
                    className="btn btn-green my-2 "
                    label={"View"}
                  />
                </div>
              </div>
            </div>
            <div className="d-flex justify-content-end mt-2 mr-2">
              <div className="row">
                <MasterFilter
                  isHiddenFilter
                  width="200px"
                  inputWidth="200px"
                  value={values?.searchtText}
                  setValue={(value) => {
                    setFieldValue("searchtText", value);
                    if (values?.employeeSrc) {
                      commonDtofilter(
                        value,
                        setRowDto,
                        "dteAttendanceDate",
                        rowDto,
                        () => {
                          overtimeLanding(initPage);
                        }
                      );
                    }
                  }}
                  cancelHandler={() => {
                    setFieldValue("searchtText", "");
                    if (values?.employeeSrc) {
                      return overtimeLanding(
                        initPage,
                        "",
                        values?.employeeSrc?.value
                      );
                    }
                    overtimeLanding(initPage);
                  }}
                  // withoutFrontIcon
                  placeholder={
                    values?.employeeSrc ? " Search by date" : " Search"
                  }
                />

                {!values?.employeeSrc && (
                  <PrimaryButton
                    type="button"
                    className="btn btn-cancel mr-2"
                    label="Search"
                    onClick={() => {
                      if (!values?.searchtText)
                        return toast.warn(
                          "Please enter any keyword or text to search for data"
                        );
                      overtimeLanding(initPage, values?.searchtText);
                    }}
                  />
                )}

                <PrimaryButton
                  type="button"
                  className="btn btn-green px-auto mr-2"
                  label={"Save"}
                  onClick={saveFromFieldHandler}
                />
              </div>
            </div>
            <div className="table-card-body">
              {rowDto?.length > 0 ? (
                <div className="table-card-styled tableOne">
                  <div className="table-card-styled employee-table-card tableOne  table-responsive mt-3">
                    <AntTable
                      data={rowDto}
                      columnsData={overTimeGeneratedDtoCol(rowDtoHandler)}
                      rowKey={(record) => record?.strEmployeeCode}
                      handleTableChange={handleTableChange}
                      pages={values?.employeeSrc ? 100 : pages?.pageSize}
                      pagination={
                        values?.employeeSrc
                          ? {
                              current: 1,
                              pageSize: 100,
                            }
                          : pages
                      }
                    />
                  </div>
                </div>
              ) : (
                <NoResult />
              )}
            </div>
          </>
        ) : (
          <NotPermittedPage />
        )}
      </form>
    </div>
  );
};

export default EmOvertimeAutoGenerated;
